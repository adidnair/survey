"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useForm } from "react-hook-form";
import { Popover, PopoverContent, PopoverTrigger } from "./ui/popover";
import { cn } from "@/lib/utils";
import { Check, ChevronsUpDown, X } from "lucide-react";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
} from "./ui/command";
import {
  LanguageEntry,
  LanguageResponse,
  valToLabel,
  language_vals,
} from "./questions/languages";
import { useState } from "react";
import { Separator } from "./ui/separator";
import { Slider } from "./ui/slider";
import { Label } from "./ui/label";

const formSchema = z.object({
  email: z
    .string()
    .email({
      message: "Please enter a valid email",
    })
    .or(z.string().length(0)),
  age: z.coerce
    .number({ invalid_type_error: "Please enter a number." })
    .int()
    .min(0, {
      message: "Please enter your actual age.",
    })
    .max(116, {
      message:
        "The oldest person in the world is 116. Please enter your actual age.",
    }),
  // sex: z.string().nonempty(),
  languages: z
    .object({
      value: z.string({required_error: "string req", invalid_type_error: "str how"}).refine((val) => {
        language_vals.includes(val);
      },
      {message: "value refine oopsie"}),
      experience: z.number().int().min(0, {message: "exp should gt 0"}).max(100),
      recommendation: z.number().int().min(0, {message: "rec should gt 0"}).max(100),
    })
    .array(),
});

const SurveyForm = () => {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      age: undefined,
    },
  });

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // âœ… This will be type-safe and validated.
    console.log(values);
  }

  const languages: readonly LanguageEntry[] = language_vals.map((val) => {
    return {
      value: val,
      label: valToLabel[val],
    };
  });

  const [selected_languages, select_language] = useState<LanguageResponse[]>(
    [],
  );

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input
                  className="w-80"
                  placeholder="Example: email@domain.com"
                  {...field}
                />
              </FormControl>
              <FormDescription>
                Please provide your email address. Rest assured, we will not
                send you any emails or disclose your email to anyone. However,
                if you prefer, you can leave this field blank.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Separator />

        <FormField
          control={form.control}
          name="age"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Age</FormLabel>
              <FormControl>
                <Input className="w-80" placeholder="Example: 21" {...field} />
              </FormControl>
              <FormDescription>Please specify your age</FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />

        <Separator />

        <FormField
          control={form.control}
          name="languages"
          render={({ field }) => {
            return (
            <FormItem className="flex flex-col">
              <FormLabel className="mb-1">Languages</FormLabel>
              <div className="flex flex-row items-center gap-4 w-full h-14">
                <Label className="w-[210px] text-muted-foreground shrink-0">
                  Language
                </Label>
                <Separator orientation="vertical" className="h-10" />
                <Label className="w-[332px] text-muted-foreground shrink-0">
                  Rate your experience with the language
                </Label>
                <Separator orientation="vertical" className="h-10" />
                <Label className="text-muted-foreground shrink-0">
                  How likely are you to recommend the language?
                </Label>
              </div>
              <FormControl>
                <div className="flex flex-col gap-4">
                  {selected_languages.map((selected_language, index) => {
                    return (
                      <div
                        className="flex flex-row py-2 gap-12"
                        key={selected_language.value}
                      >
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant="outline"
                              role="combobox"
                              className="w-[200px] justify-between shrink-0"
                            >
                              {valToLabel[selected_language.value]}
                              <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-[200px] p-0">
                            <Command>
                              <CommandInput placeholder="Search language..." />
                              <CommandEmpty>No language found.</CommandEmpty>
                              <CommandGroup>
                                {languages
                                  .filter((l) => {
                                    if (
                                      l.value ===
                                      selected_languages[index].value
                                    )
                                      return true;
                                    for (const sl of selected_languages) {
                                      if (sl.value === l.value) return false;
                                    }
                                    return true;
                                  })
                                  .map((language) => (
                                    <CommandItem
                                      value={language.label}
                                      key={language.value}
                                      onSelect={() => {
                                        select_language((arr) => {
                                          return arr.map((l, li) => {
                                            if (li === index)
                                              return {
                                                value: language.value,
                                                experience: l.experience,
                                                recommendation:
                                                  l.recommendation,
                                              };
                                            return l;
                                          });
                                        });
                                      }}
                                    >
                                      <Check
                                        className={cn(
                                          "mr-2 h-4 w-4",
                                          language.value ===
                                            selected_languages[index].value
                                            ? "opacity-100"
                                            : "opacity-0",
                                        )}
                                      />
                                      {language.label}
                                    </CommandItem>
                                  ))}
                              </CommandGroup>
                            </Command>
                          </PopoverContent>
                        </Popover>

                        <div className="flex justify-center">
                          <Slider
                            name="experience"
                            className="w-80 shrink-0"
                            min={0}
                            max={100}
                            step={1}
                            defaultValue={[50]}
                            onValueCommit={(val) => {
                              select_language((arr) => {
                                return arr.map((l, li) => {
                                  if (li === index)
                                    return {
                                      value: l.value,
                                      experience: val[0],
                                      recommendation: l.recommendation,
                                    };
                                  return l;
                                });
                              });
                            }}
                          />
                        </div>

                        <div className="flex justify-center">
                          <Slider
                            name="recommendation"
                            className="w-80 shrink-0"
                            min={0}
                            max={100}
                            step={1}
                            defaultValue={[50]}
                            onValueCommit={(val) => {
                              select_language((arr) => {
                                return arr.map((l, li) => {
                                  if (li === index)
                                    return {
                                      value: l.value,
                                      experience: l.experience,
                                      recommendation: val[0],
                                    };
                                  return l;
                                });
                              });
                            }}
                          />
                        </div>

                        <div className="w-full"></div>
                        <div className="flex items-center">
                          <X
                            width={60}
                            className="shrink-0 text-muted
                          hover:text-muted-foreground hover:cursor-pointer"
                            onClick={() =>
                              select_language((arr) => {
                                return arr.filter((l) => {
                                  return l.value !== selected_language.value;
                                });
                              })
                            }
                          />
                        </div>
                      </div>
                    );
                  })}

                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        role="combobox"
                        className="w-[200px] justify-between text-muted-foreground bg-muted"
                      >
                        {"Select language"}
                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-[200px] p-0">
                      <Command>
                        <CommandInput placeholder="Search language..." />
                        <CommandEmpty>No language found.</CommandEmpty>
                        <CommandGroup>
                          {languages
                            .filter((language) => {
                              for (const l of selected_languages) {
                                if (language.value === l.value) return false;
                              }
                              return true;
                            })
                            .map((language) => (
                              <CommandItem
                                value={language.label}
                                key={language.value}
                                onSelect={() => {
                                  select_language((sl) => [
                                    ...sl,
                                    {
                                      value: language.value,
                                      experience: -1,
                                      recommendation: -1,
                                    },
                                  ]);
                                }}
                              >
                                {language.label}
                              </CommandItem>
                            ))}
                        </CommandGroup>
                      </Command>
                    </PopoverContent>
                  </Popover>
                </div>
              </FormControl>
              <FormDescription>
                Select all the languages you know about.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}}
        />

        <Separator />

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};

export default SurveyForm;
